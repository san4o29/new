import os
import logging
from openai import OpenAI
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters
)
from langdetect import detect

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è OpenAI –∫–ª—ñ—î–Ω—Ç–∞
client = OpenAI(api_key=OPENAI_API_KEY)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["/start", "–î–æ–ø–æ–º–æ–≥–∞"], ["–©–æ —Ç–∞–∫–µ karta pobytu?"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –¥–æ–ø–æ–º–æ–≥–∏ –∑ –ª–µ–≥–∞–ª—ñ–∑–∞—Ü—ñ—î—é –≤ –ü–æ–ª—å—â—ñ üáµüá±\n–ù–∞–ø–∏—à–∏ —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è!",
        reply_markup=reply_markup
    )

# –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –º–æ–≤–∏
def detect_language(text):
    try:
        return detect(text)
    except:
        return "unknown"

# –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    user_id = update.message.from_user.id
    lang = detect_language(user_message)

    logging.info(f"User {user_id} ({lang}): {user_message}")

    prompt = f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–∏—Ç–∞—î –ø—Ä–æ –ª–µ–≥–∞–ª—ñ–∑–∞—Ü—ñ—é –≤ –ü–æ–ª—å—â—ñ. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –ø—Ä–æ—Å—Ç–æ—é –º–æ–≤–æ—é.\n–ü–∏—Ç–∞–Ω–Ω—è: {user_message}"

    try:
        response = client.chat.completions.create(
    model="gpt-3.5-turbo",  # –∞–±–æ gpt-4, —è–∫—â–æ –º–∞—î—à –¥–æ—Å—Ç—É–ø
    messages=[
        {"role": "system", "content": "–¢–∏ –µ–∫—Å–ø–µ—Ä—Ç —ñ–∑ –ª–µ–≥–∞–ª—ñ–∑–∞—Ü—ñ—ó –≤ –ü–æ–ª—å—â—ñ."},
        {"role": "user", "content": prompt}
    ],
    temperature=0.7,
    max_tokens=500
)
answer = response.choices[0].message.content
        await update.message.reply_text(answer)

    except Exception as e:
        logging.error(f"OpenAI error: {e}")
        await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

# –ó–∞–ø—É—Å–∫ webhook
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))

    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 8000)),
        webhook_url=WEBHOOK_URL
    )

if __name__ == "__main__":
    main()

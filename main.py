import os
import logging
from openai import OpenAI
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters
)
from langdetect import detect

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
PORT = int(os.environ.get("PORT", 8000))

# OpenAI –∫–ª—ñ—î–Ω—Ç
client = OpenAI(api_key=OPENAI_API_KEY)

# –ë–∞–∑–∞ –∑–Ω–∞–Ω—å
faq_data = {
    "—É–∫—Ä–∞—ó–Ω–∞": {
        "uk": [
            {
                "keywords": ["–∫–∞—Ä—Ç–∞ –ø–æ–±–∏—Ç—É", "—Ç–∏–º—á–∞—Å–æ–≤–µ –ø–µ—Ä–µ–±—É–≤–∞–Ω–Ω—è", "–¥–æ–∫—É–º–µ–Ω—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç—É"],
                "answer": "–ì—Ä–æ–º–∞–¥—è–Ω–∏ –£–∫—Ä–∞—ó–Ω–∏ –º–æ–∂—É—Ç—å –ø–æ–¥–∞—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç—É –ø–æ–±–∏—Ç—É –Ω–∞ –ø—ñ–¥—Å—Ç–∞–≤—ñ —Ä–æ–±–æ—Ç–∏, –Ω–∞–≤—á–∞–Ω–Ω—è –∞–±–æ —Ä–æ–¥–∏–Ω–Ω–∏—Ö –∑–≤‚Äô—è–∑–∫—ñ–≤. –ó–∞—è–≤–∞ –ø–æ–¥–∞—î—Ç—å—Å—è –¥–æ –í–æ—î–≤–æ–¥—Å—å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞ –º—ñ—Å—Ü–µ–º –ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—è. –ù–µ–æ–±—Ö—ñ–¥–Ω–æ –ø—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ –ø–∞—Å–ø–æ—Ä—Ç, —Ñ–æ—Ç–æ, –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–æ—Ö–æ–¥—ñ–≤, –º–µ–¥–∏—á–Ω—É —Å—Ç—Ä–∞—Ö–æ–≤–∫—É, –¥–æ–≥–æ–≤—ñ—Ä –æ—Ä–µ–Ω–¥–∏ —Ç–∞ —ñ–Ω—à—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏.\n–ü—Ä–æ—Ü–µ—Å –º–æ–∂–µ –∑–∞–π–º–∞—Ç–∏ 3‚Äì6 –º—ñ—Å—è—Ü—ñ–≤.",
                "advice": "–ó–±–µ—Ä—ñ–≥–∞–π—Ç–µ –∫–æ–ø—ñ—ó –≤—Å—ñ—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ —Ç–∞ –ø–æ–¥–∞–≤–∞–π—Ç–µ –∑–∞—è–≤—É —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–º –ª–∏—Å—Ç–æ–º –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º –ø—Ä–æ –≤—Ä—É—á–µ–Ω–Ω—è."
            },
            {
                "keywords": ["—Ç–∏–º—á–∞—Å–æ–≤–∏–π –∑–∞—Ö–∏—Å—Ç", "status UKR", "–∑–∞—Ö–∏—Å—Ç –¥–ª—è —É–∫—Ä–∞—ó–Ω—Ü—ñ–≤"],
                "answer": "–ü–æ–ª—å—â–∞ –Ω–∞–¥–∞–ª–∞ —Ç–∏–º—á–∞—Å–æ–≤–∏–π –∑–∞—Ö–∏—Å—Ç (status UKR) —É–∫—Ä–∞—ó–Ω—Ü—è–º, —è–∫—ñ –ø—Ä–∏–±—É–ª–∏ –ø—ñ—Å–ª—è 24 –ª—é—Ç–æ–≥–æ 2022 —Ä–æ–∫—É. –í—ñ–Ω –¥–æ–∑–≤–æ–ª—è—î –ª–µ–≥–∞–ª—å–Ω–µ –ø–µ—Ä–µ–±—É–≤–∞–Ω–Ω—è, –¥–æ—Å—Ç—É–ø –¥–æ —Ä–∏–Ω–∫—É –ø—Ä–∞—Ü—ñ, –æ—Å–≤—ñ—Ç–∏ —Ç–∞ –º–µ–¥–∏—á–Ω–∏—Ö –ø–æ—Å–ª—É–≥.",
                "advice": "–ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è —É —Å–∏—Å—Ç–µ–º—ñ PESEL —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –¥–æ –ø—Ä–∞–≤."
            },
            {
                "keywords": ["—Ä–æ–±–æ—Ç–∞", "–¥–æ–∑–≤—ñ–ª –Ω–∞ —Ä–æ–±–æ—Ç—É", "–ø—Ä–∞—Ü–µ–≤–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"],
                "answer": "–£–∫—Ä–∞—ó–Ω—Ü—ñ –º–æ–∂—É—Ç—å –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –≤ –ü–æ–ª—å—â—ñ –±–µ–∑ –¥–æ–∑–≤–æ–ª—É –Ω–∞ —Ä–æ–±–æ—Ç—É –∑–∞ —É–º–æ–≤–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∞—Ü–µ–¥–∞–≤—Ü–µ–º —á–µ—Ä–µ–∑ –ø–æ—Ä—Ç–∞–ª praca.gov.pl. –¶–µ –ø—Ä–∞–≤–∏–ª–æ —Å—Ç–æ—Å—É—î—Ç—å—Å—è –æ—Å—ñ–± –∑ —Ç–∏–º—á–∞—Å–æ–≤–∏–º –∑–∞—Ö–∏—Å—Ç–æ–º, –≤—ñ–∑–æ—é –∞–±–æ —ñ–Ω—à–∏–º –¥–æ–∑–≤–æ–ª–µ–Ω–∏–º –ø–µ—Ä–µ–±—É–≤–∞–Ω–Ω—è–º.",
                "advice": "–ü–µ—Ä–µ–≤—ñ—Ä—è–π—Ç–µ, —á–∏ —Ä–æ–±–æ—Ç–æ–¥–∞–≤–µ—Ü—å —Å–ø—Ä–∞–≤–¥—ñ –ø–æ–¥–∞–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ UrzƒÖd Pracy."
            }
        ]
    },
    "–±—ñ–ª–æ—Ä—É—Å—å": {
        "ru": [
            {
                "keywords": ["–∫–∞—Ä—Ç–∞ –ø–æ–±—ã—Ç—É", "–≤–æ–µ–≤–æ–¥—Å–∫–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ", "–ª–µ–≥–∞–ª–∏–∑–∞—Ü–∏—è"],
                "answer": "–ì—Ä–∞–∂–¥–∞–Ω–µ –ë–µ–ª–∞—Ä—É—Å–∏ –º–æ–≥—É—Ç –ø–æ–¥–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç—É –ø–æ–±—ã—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã, –±–∏–∑–Ω–µ—Å–∞, —É—á—ë–±—ã –∏–ª–∏ –≤–æ—Å—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å–µ–º—å–∏. –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ —Ç–∞–∫–∞—è –∂–µ, –∫–∞–∫ –∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∏–Ω–æ—Å—Ç—Ä–∞–Ω—Ü–µ–≤: –ø–æ–¥–∞—á–∞ –∑–∞—è–≤–ª–µ–Ω–∏—è, —Å–±–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –æ–∂–∏–¥–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è.\n–°—Ä–æ–∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è ‚Äî –æ—Ç 3 –¥–æ 8 –º–µ—Å—è—Ü–µ–≤.",
                "advice": "–•—Ä–∞–Ω–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–∞—á–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ –≤—ã –ø–æ–¥–∞—ë—Ç–µ—Å—å –ø–æ –ø–æ—á—Ç–µ."
            },
            {
                "keywords": ["—Ä–∞–±–æ—Ç–∞", "–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", "—Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ"],
                "answer": "–î–ª—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤ –ü–æ–ª—å—à–µ –±–µ–ª–æ—Ä—É—Å–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Ä–∞–±–æ—Ç—É —Ç–∏–ø–∞ A –∏–ª–∏ –∫–∞—Ä—Ç–∞ –ø–æ–±—ã—Ç—É —Å –ø—Ä–∞–≤–æ–º –Ω–∞ —Ç—Ä—É–¥.\n–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ —á–µ—Ä–µ–∑ –≤–æ–µ–≤–æ–¥—Å—Ç–≤–æ.",
                "advice": "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –∫–æ–ø–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —Ä–∞–±–æ—Ç—É, –≤—ã–¥–∞–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–º."
            }
        ]
    },
    "–º–æ–ª–¥–æ–≤–∞": {
        "ru": [
            {
                "keywords": ["–±–µ–∑–≤–∏–∑", "—Ä–∞–±–æ—Ç–∞", "–ª–µ–≥–∞–ª–∏–∑–∞—Ü–∏—è"],
                "answer": "–ì—Ä–∞–∂–¥–∞–Ω–µ –ú–æ–ª–¥–æ–≤—ã –º–æ–≥—É—Ç –ø—Ä–µ–±—ã–≤–∞—Ç—å –≤ –ü–æ–ª—å—à–µ –¥–æ 90 –¥–Ω–µ–π –±–µ–∑ –≤–∏–∑—ã. –î–ª—è –ª–µ–≥–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –∏ —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–æ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç—É –ø–æ–±—ã—Ç—É.\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç, —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ, –∂–∏–ª—å—ë –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤.",
                "advice": "–ü–æ–¥–∞–≤–∞–π—Ç–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –±–µ–∑–≤–∏–∑–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞."
            }
        ]
    },
    "–≥—Ä—É–∑—ñ—è": {
        "ru": [
            {
                "keywords": ["–≤–∏–∑–∞", "–∫–∞—Ä—Ç–∞ –ø–æ–±—ã—Ç—É", "–ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ"],
                "answer": "–ì—Ä–∞–∂–¥–∞–Ω–µ –ì—Ä—É–∑–∏–∏ –º–æ–≥—É—Ç –ø—Ä–µ–±—ã–≤–∞—Ç—å –≤ –ü–æ–ª—å—à–µ –¥–æ 90 –¥–Ω–µ–π –±–µ–∑ –≤–∏–∑—ã. –î–ª—è –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –∏ —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –∫–∞—Ä—Ç—É –ø–æ–±—ã—Ç—É –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –≤–∏–∑—É —Ç–∏–ø–∞ D.\n–ü—Ä–∏ –ø–æ–¥–∞—á–µ –≤–∞–∂–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã, –≤–∫–ª—é—á–∞—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é —Å—Ç—Ä–∞—Ö–æ–≤–∫—É.",
                "advice": "–ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –≤—ä–µ–∑–¥–∞ –Ω–∞ —Å–∞–π—Ç–µ –ø–æ–ª—å—Å–∫–æ–≥–æ –ú–ò–î."
            }
        ]
    },
    "—ñ–Ω–¥–æ–Ω–µ–∑—ñ—è": {
        "id": [
            {
                "keywords": ["izin tinggal", "kartu tinggal", "visa kerja"],
                "answer": "Warga negara Indonesia harus memiliki visa kerja (tipe D) atau izin tinggal untuk tinggal dan bekerja di Polandia.\nPermohonan dilakukan di kantor Voivodeship dan memerlukan dokumen seperti paspor, kontrak kerja, dan asuransi.",
                "advice": "Ajukan aplikasi sedini mungkin sebelum visa Anda habis masa berlakunya."
            }
        ]
    },
    "–∫–æ–ª—É–º–±—ñ—è": {
        "es": [
            {
                "keywords": ["residencia", "trabajar", "permiso de trabajo"],
                "answer": "Los ciudadanos colombianos necesitan una visa nacional tipo D para trabajar o residir legalmente en Polonia.\nPosteriormente pueden solicitar la tarjeta de residencia temporal ('karta pobytu').",
                "advice": "Aseg√∫rese de tener un contrato de trabajo v√°lido antes de iniciar el proceso."
            }
        ]
    },
    "—Ñ—ñ–ª—ñ–ø—ñ–Ω–∏": {
        "en": [
            {
                "keywords": ["residence permit", "work permit", "visa"],
                "answer": "Citizens of the Philippines need a national D visa and a work permit to stay and work legally in Poland.\nLater, they can apply for a temporary residence card ('karta pobytu').",
                "advice": "Make sure your employer provides the correct documents for your visa application."
            }
        ]
    },
    "–Ω–µ–ø–∞–ª": {
        "en": [
            {
                "keywords": ["work in poland", "residence card", "legal stay"],
                "answer": "Nepali citizens must apply for a national visa and work permit before entering Poland.\nTo stay long-term, you will need to apply for a residence card through the voivodeship office.",
                "advice": "Be cautious with agencies‚Äîverify job offers before applying for a visa."
            }
        ]
    }
}

# –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –º–æ–≤–∏
def detect_language(text):
    try:
        return detect(text)
    except:
        return "unknown"

# –ü–æ—à—É–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
def find_answer(user_text, user_lang):
    for country, langs in faq_data.items():
        for lang, questions in langs.items():
            if user_lang == lang:
                for q in questions:
                    if any(keyword.lower() in user_text.lower() for keyword in q["keywords"]):
                        return f"{q['answer']}\n\nüí° {q['advice']}"
    return None

# –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–£–∫—Ä–∞—ó–Ω–∞ üá∫üá¶", "–ë—ñ–ª–æ—Ä—É—Å—å üáßüáæ"], ["–ú–æ–ª–¥–æ–≤–∞ üá≤üá©", "–ì—Ä—É–∑—ñ—è üá¨üá™"],
                ["–Ü–Ω–¥–æ–Ω–µ–∑—ñ—è üáÆüá©", "–ö–æ–ª—É–º–±—ñ—è üá®üá¥"], ["–§—ñ–ª—ñ–ø—ñ–Ω–∏ üáµüá≠", "–ù–µ–ø–∞–ª üá≥üáµ"],
                ["–ó–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤'—è–∑–æ–∫"]]
    await update.message.reply_text(
        "üåç –û–±–µ—Ä—ñ—Ç—å –≤–∞—à—É –∫—Ä–∞—ó–Ω—É –ø–æ—Ö–æ–¥–∂–µ–Ω–Ω—è:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )

# –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    lang = detect_language(user_message)
    answer = find_answer(user_message, lang)

    if answer:
        await update.message.reply_text(answer)
    else:
        try:
            prompt = f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–¥–∞—î –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –ª–µ–≥–∞–ª—ñ–∑–∞—Ü—ñ—é –≤ –ü–æ–ª—å—â—ñ. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –ø—Ä–æ—Å—Ç–æ—é –º–æ–≤–æ—é. –ü–∏—Ç–∞–Ω–Ω—è: {user_message}"
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "–¢–∏ –µ–∫—Å–ø–µ—Ä—Ç —ñ–∑ –ª–µ–≥–∞–ª—ñ–∑–∞—Ü—ñ—ó –≤ –ü–æ–ª—å—â—ñ."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.7,
                max_tokens=500
            )
            await update.message.reply_text(response.choices[0].message.content)
        except Exception as e:
            logging.error(f"OpenAI error: {e}")
            await update.message.reply_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ webhook
def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        webhook_url=WEBHOOK_URL
    )

if __name__ == "__main__":
    main()
